#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "../common/payload.glsl"
#include "../common/scene_data.glsl"
#include "options.glsl"
#include "../common/random.glsl"
#include "../common/constants.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(location = 0) rayPayloadEXT Payload payload;

void main() {
    payload.rng_state = imageLoad(rng_tex, ivec2(gl_LaunchIDEXT.xy));

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(stepAndOutputRNGFloat(payload.rng_state), stepAndOutputRNGFloat(payload.rng_state));
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    payload.next_origin = (sceneData.inv_view * vec4(0,0,0,1)).xyz;
    vec4 target = sceneData.inv_proj * vec4(d.x, d.y, 1, 1);
    payload.next_direction = (sceneData.inv_view * vec4(normalize(target.xyz), 0)).xyz;
    payload.light = vec3(0.0);
    payload.depth = 0;
    payload.beta = vec3(1.0);
    payload.eta_scale = 1;
    payload.specular_bounce = false;

    while (payload.depth < options.recursion_depth && payload.next_direction != vec3(0.0)) {
        float tmin = EPSILON;
        float tmax = 10000.0;

        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, payload.next_origin, tmin, payload.next_direction, tmax, 0);
        payload.depth++;
    }

    vec3 prev_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    vec3 color = (options.curr_sample_count * prev_color + payload.light) / (options.curr_sample_count + 1);

    imageStore(rng_tex, ivec2(gl_LaunchIDEXT.xy), payload.rng_state);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}